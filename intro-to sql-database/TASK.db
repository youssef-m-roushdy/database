-- How To Create Database And Insert Data Into It

-- Define New Database
CREATE DATABASE Couresradb;

-- Use That Database
USE Couresradb;

-- Create Table To Store Data
CREATE TABLE Employees
(EmpId INT,
EmpName VARCHAR(20),
EmpSalary FLOAT,
HireDate DATETIME
);

-- Get All Table Data From Specific Table In Database
SELECT * FROM Employees;

-- Insert Data To Specific Table in Database 
INSERT INTO Employees VALUES(120, "Youssef Mahmoud", 12000, NOW());
INSERT INTO Employees VALUES(105, "Mohamed Ali", 25000, '2022-01-23');
-- Insert Specific Data
INSERT INTO Employees(EmpID, EmpName, EmpSalary) VALUES(105, "Sarah Malek", 25000);

-- Updating Data on Specific Table on Database

-- If you don't specify a condition it will update all records 
UPDATE Employees
SET HireDate = NOW();

-- Update specific record
UPDATE Employees
SET HireDate = '2023-01-01', EmpSalary = 40000
WHERE EmpName="Sarah Malek";

-- Delete Records From Database

--Delete All records
DELETE FROM Employees

--Delete Specific Record
DELETE FROM Employees
WHERE EmpId = 105

-- Delete table and create it with Demontrating Constaints on them

DROP TABLE Employees;

CREATE TABLE Depatrments
(DeptId INT PRIMARY KEY AUTO_INCREMENT,
DeptName VARCHAR(50) NOT NULL,
DeptLocation VARCHAR(50) CHECK(DeptLocation IN ('H250S1', 'H250S2', 'H250S3')),
DeptAddedDate DATETIME DEFAULT NOW()
);

CREATE TABLE Employees (
EmpId INT PRIMARY KEY AUTO_INCREMENT,
EmpName VARCHAR(50) NOT NULL,
EmpSalary FLOAT CHECK (EmpSalary > 5000),
EmpEmail VARCHAR(255) UNIQUE, -- MAX is not valid for VARCHAR in MySQL
HireAddedDate DATETIME DEFAULT NOW(), -- Default for DATETIME works in MySQL 5.6+
DeptId INT,
CONSTRAINT FK_DeptId FOREIGN KEY (DeptId) REFERENCES Depatrments (DeptId) -- Fixed table name typo
);

INSERT INTO Employees(EmpName, EmpSalary, EmpEmail)
VALUES("Sarah Malek", 25000, "sarah@gmail.com");
INSERT INTO Employees(EmpName, EmpSalary, EmpEmail)
VALUES("Youssef Mahmoud", 15000, "youssef@gmail.com");
INSERT INTO Employees(EmpName, EmpSalary, EmpEmail, DeptId)
VALUES("Mohamed Ali", 17000, "mohamed@gmail.com", 2);
INSERT INTO Employees(EmpName, EmpSalary, EmpEmail, DeptId)
VALUES("Majed Maher", 35000, "majed@gmail.com", 1);
INSERT INTO Employees(EmpName, EmpSalary, EmpEmail, DeptId)
VALUES("John Mark", 27000, "john@gmail.com", 3);

INSERT INTO Depatrments(DeptName, DeptLocation)
VALUES('Analizing', 'H250S1');
INSERT INTO Depatrments(DeptName, DeptLocation)
VALUES('Planinig', 'H250S2');
INSERT INTO Depatrments(DeptName, DeptLocation)
VALUES('Working', 'H250S3');
INSERT INTO Depatrments(DeptName, DeptLocation)
VALUES('Trading', 'H250S1');
INSERT INTO Depatrments(DeptName, DeptLocation)
VALUES('Managing', 'H250S1');

SELECT * FROM Depatrments;
SELECT * FROM Employees;

-- Projection is to restrict the number of columns
SELECT EmpId, EmpName, EmpSalary FROM Employees;

-- Selection is to restrict the number of rows
SELECT * FROM Employees
WHERE EmpSalary > 15000;

-- Both projection & Selection
SELECT EmpId, EmpName, EmpSalary
FROM Employees
WHERE EmpSalary > 15000;

-- Order By Clause

SELECT EmpId, EmpName, EmpSalary
FROM Employees
WHERE EmpSalary > 15000 ORDER BY EmpName DESC;

SELECT EmpId, EmpName, EmpSalary
FROM Employees
ORDER BY EmpName ASC, EmpSalary ASC;

SELECT EmpId, EmpName, EmpSalary, EmpSalary * 12 AnnualSalary
FROM Employees
ORDER BY AnnualSalary ASC;

-- You can a stored procedure or a block of code within BEGIN...END to store variables:

DELIMITER $$

CREATE PROCEDURE PrintMessage()
BEGIN
    DECLARE message VARCHAR(200);
    SET message = 'Hello World!!';
    SELECT message;
END$$

DELIMITER ;

CALL PrintMessage();

-- SQL Operators

SELECT EmpName, EmpSalary, EmpSalary * 12
FROM Employees;

SELECT EmpName, EmpSalary, EmpSalary * 12 AnnualSalary
FROM Employees;

SELECT EmpName, EmpSalary, EmpSalary * 12 'Annual Salary'
FROM Employees;

SELECT EmpName, EmpSalary, EmpSalary * 12 as 'Annual Salary'
FROM Employees;

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpSalary >= 17000;

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpName = 'Youssef Mahmoud';

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpName <> 'Youssef Mahmoud';

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpName = 'Youssef Mahmoud' OR EmpName = 'John Mark';

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpName = 'Youssef Mahmoud' AND EmpSalary > 12000;

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpName = 'Youssef Mahmoud' AND NOT EmpSalary = 25000;

-- SQL Predicates

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpName IN('Youssef Mahmoud', 'John Mark', 'Sarah Malek');

SELECT EmpName, EmpSalary
FROM Employees
WHERE EmpName NOT IN('Youssef Mahmoud', 'John Mark', 'Sarah Malek');

SELECT *
FROM Employees
WHERE EmpSalary BETWEEN 20000 AND 40000;

SELECT *
FROM Employees
WHERE EmpSalary NOT BETWEEN 20000 AND 40000;

SELECT *
FROM Employees
WHERE DeptId IS NULL;

SELECT *
FROM Employees
WHERE DeptId IS NOT NULL;

SELECT *
FROM Employees
WHERE EmpName LIKE 'y%'; -- Start character should be 'y'

SELECT *
FROM Employees
WHERE EmpName LIKE '%d'; -- Last character should be 'd'

SELECT *
FROM Employees
WHERE EmpName LIKE '%j%'; -- String Contain character 'j'

SELECT *
FROM Employees
WHERE EmpName LIKE '_a%'; -- First character Anything and Second character is 'a'

-- SQL Joins

--Inner Join
SELECT Employees.EmpName, Depatrments.DeptName
FROM Employees INNER JOIN Depatrments
ON Employees.DeptId = Depatrments.DeptId;

SELECT e.EmpName, d.DeptName
FROM Employees as e INNER JOIN Depatrments as d
ON e.DeptId = d.DeptId;

--Left Join
SELECT e.EmpName, d.DeptName
FROM Employees as e LEFT OUTER JOIN Depatrments as d
ON e.DeptId = d.DeptId;

SELECT e.EmpName, d.DeptName
FROM Employees as e RIGHT OUTER JOIN Depatrments as d
ON e.DeptId = d.DeptId;

-- Full Join

SELECT e.EmpName, d.DeptName
FROM Employees as e LEFT OUTER JOIN Depatrments as d
ON e.DeptId = d.DeptId
UNION
SELECT e.EmpName, d.DeptName
FROM Employees as e RIGHT OUTER JOIN Depatrments as d
ON e.DeptId = d.DeptId;

-- Types Of Views

-- Information Schema
SELECT * 
FROM information_schema.CHECK_CONSTRAINTS 
LIMIT 100;

SELECT * 
FROM information_schema.tables
WHERE TABLE_NAME IN('Employees', 'Depatrments');

--Catalog view

SELECT * 
FROM information_schema.tables;

-- User Defined View

CREATE VIEW vw_EPM4
AS 
SELECT * FROM Employees
WHERE DeptId = 4;

SELECT * FROM vw_EPM4;

ALTER VIEW vw_EPM4
AS 
SELECT EmpId, EmpName, EmpSalary FROM Employees
WHERE DeptId = 4;

CREATE VIEW vw_EmpDept3
AS 
SELECT e.EmpName, d.DeptName, e.EmpSalary, d.DeptLocation
FROM Employees e JOIN Depatrments d
ON e.DeptId = d.DeptId
AND d.DeptId = 3;

SELECT * FROM vw_EmpDept3;

DROP VIEW vw_EPM4;

DROP VIEW vw_EmpDept3;

-- Create indexes

CREATE TABLE EmployeeDetails
(
    EmpId INT,
    EmpName VARCHAR(20),
    EmpSalaray FLOAT,
    HireDate DATETIME
);

--Create Clustered Index In MySQL
ALTER TABLE EmployeeDetails
ADD PRIMARY KEY (EmpId);

--Create Non-Clustered Index In MySQL
CREATE INDEX idx_EmployeeDetails_EmpName
ON EmployeeDetails(EmpName);

-- Add unique constraint to index
DROP INDEX idx_EmployeeDetails_EmpName
ON EmployeeDetails;

CREATE UNIQUE INDEX idx_EmployeeDetails_EmpName
ON EmployeeDetails (EmpName);
SHOW INDEX FROM EmployeeDetails;

DROP INDEX idx_EmployeeDetails_EmpId
ON EmployeeDetails;

SELECT * FROM EmployeeDetails;

INSERT INTO EmployeeDetails VALUES(103, 'King', 12000, NOW());
INSERT INTO EmployeeDetails VALUES(115, 'Youssef', 17000, '2023-4-5');
INSERT INTO EmployeeDetails VALUES(109, 'Maher', 20000, '2022-12-12');
INSERT INTO EmployeeDetails VALUES(107, 'Waled', 25000, '2022-1-3');
INSERT INTO EmployeeDetails VALUES(135, 'John', 30000, '2021-5-6');
INSERT INTO EmployeeDetails(EmpId, EmpName, EmpSalaray) VALUES(120, 'Sarah', 35000);

